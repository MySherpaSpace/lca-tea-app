{"ast":null,"code":"import{configureStore}from\"@reduxjs/toolkit\";import{combineReducers}from'redux';import{FLUSH,PAUSE,PERSIST,PURGE,REGISTER,REHYDRATE,persistReducer,persistStore}from'redux-persist';import storage from'redux-persist/lib/storage';// features\nimport projectsReducer from\"./features/projectsSlice\";import allowedTabsReducer from\"./features/allowedTabsSlice\";import allowedBasicInfoPagesReducer from\"./features/allowedSectionPages/allowedBasicInfoPages\";import allowedTEAPagesReducer from\"./features/allowedSectionPages/allowedTEAPages\";import basicInfoReducer from\"./features/basicInfoSlice\";// persist config obj\n// blacklist a store attribute using it's reducer name. Blacklisted attributes will not persist. (I did not find a way to blacklist specific values)\nvar rootPersistConfig={key:'root',version:1,storage:storage,blacklist:[]//blacklisting a store attribute name, will not persist that store attribute.\n};var rootReducer=combineReducers({projects:projectsReducer,allowedTabs:allowedTabsReducer,basicInfo:basicInfoReducer,allowedBasicInfoPages:allowedBasicInfoPagesReducer,allowedTEAPages:allowedTEAPagesReducer});var persistedReducer=persistReducer(rootPersistConfig,rootReducer);var LCATEAStore=configureStore({reducer:persistedReducer,// middleware option needs to be provided for avoiding the error. ref: https://redux-toolkit.js.org/usage/usage-guide#use-with-redux-persist\nmiddleware:function middleware(getDefaultMiddleware){return getDefaultMiddleware({immutableCheck:{warnAfter:5000},serializableCheck:{ignoredActions:[FLUSH,REHYDRATE,PAUSE,PERSIST,PURGE,REGISTER],warnAfter:5000}});}});export var LCATEAPersistor=persistStore(LCATEAStore);export default LCATEAStore;","map":{"version":3,"names":["configureStore","combineReducers","FLUSH","PAUSE","PERSIST","PURGE","REGISTER","REHYDRATE","persistReducer","persistStore","storage","projectsReducer","allowedTabsReducer","allowedBasicInfoPagesReducer","allowedTEAPagesReducer","basicInfoReducer","rootPersistConfig","key","version","blacklist","rootReducer","projects","allowedTabs","basicInfo","allowedBasicInfoPages","allowedTEAPages","persistedReducer","LCATEAStore","reducer","middleware","getDefaultMiddleware","immutableCheck","warnAfter","serializableCheck","ignoredActions","LCATEAPersistor"],"sources":["/Users/mariasherpaspace/Documents/SherpaSpaceWorkFiles/Projects/LCA-TEA/LCA-TEA Coding/lca-tea-app/src/redux/LCATEAStore.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from 'redux';\n\nimport {\n  FLUSH, PAUSE, PERSIST, PURGE, REGISTER, REHYDRATE,\n  persistReducer, persistStore,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\n\n// features\nimport projectsReducer from \"./features/projectsSlice\";\n\nimport allowedTabsReducer from \"./features/allowedTabsSlice\";\nimport allowedBasicInfoPagesReducer from \"./features/allowedSectionPages/allowedBasicInfoPages\";\nimport allowedTEAPagesReducer from \"./features/allowedSectionPages/allowedTEAPages\";\n\nimport basicInfoReducer from \"./features/basicInfoSlice\";\n\n// persist config obj\n// blacklist a store attribute using it's reducer name. Blacklisted attributes will not persist. (I did not find a way to blacklist specific values)\nconst rootPersistConfig = {\n  key: 'root',\n  version: 1,\n  storage: storage,\n  blacklist: [\n\n  ] //blacklisting a store attribute name, will not persist that store attribute.\n};\n\nconst rootReducer = combineReducers({\n  projects: projectsReducer,\n  allowedTabs: allowedTabsReducer,\n  basicInfo: basicInfoReducer,\n  allowedBasicInfoPages: allowedBasicInfoPagesReducer,\n  allowedTEAPages: allowedTEAPagesReducer\n})\n\nconst persistedReducer = persistReducer(rootPersistConfig, rootReducer);\n\nconst LCATEAStore = configureStore({\n  reducer: persistedReducer,\n  // middleware option needs to be provided for avoiding the error. ref: https://redux-toolkit.js.org/usage/usage-guide#use-with-redux-persist\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    immutableCheck: {\n      warnAfter: 5000\n    },\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      warnAfter: 5000\n    },\n  }),\n});\n\nexport const LCATEAPersistor = persistStore(LCATEAStore);\nexport default LCATEAStore;"],"mappings":"AAAA,OAASA,cAAc,KAAQ,kBAAkB,CACjD,OAASC,eAAe,KAAQ,OAAO,CAEvC,OACEC,KAAK,CAAEC,KAAK,CAAEC,OAAO,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,SAAS,CACjDC,cAAc,CAAEC,YAAY,KACvB,eAAe,CAEtB,MAAOC,QAAO,KAAM,2BAA2B,CAE/C;AACA,MAAOC,gBAAe,KAAM,0BAA0B,CAEtD,MAAOC,mBAAkB,KAAM,6BAA6B,CAC5D,MAAOC,6BAA4B,KAAM,sDAAsD,CAC/F,MAAOC,uBAAsB,KAAM,gDAAgD,CAEnF,MAAOC,iBAAgB,KAAM,2BAA2B,CAExD;AACA;AACA,GAAMC,kBAAiB,CAAG,CACxBC,GAAG,CAAE,MAAM,CACXC,OAAO,CAAE,CAAC,CACVR,OAAO,CAAEA,OAAO,CAChBS,SAAS,CAAE,EAET;AACJ,CAAC,CAED,GAAMC,YAAW,CAAGnB,eAAe,CAAC,CAClCoB,QAAQ,CAAEV,eAAe,CACzBW,WAAW,CAAEV,kBAAkB,CAC/BW,SAAS,CAAER,gBAAgB,CAC3BS,qBAAqB,CAAEX,4BAA4B,CACnDY,eAAe,CAAEX,sBACnB,CAAC,CAAC,CAEF,GAAMY,iBAAgB,CAAGlB,cAAc,CAACQ,iBAAiB,CAAEI,WAAW,CAAC,CAEvE,GAAMO,YAAW,CAAG3B,cAAc,CAAC,CACjC4B,OAAO,CAAEF,gBAAgB,CACzB;AACAG,UAAU,CAAE,oBAACC,oBAAoB,QAAKA,qBAAoB,CAAC,CACzDC,cAAc,CAAE,CACdC,SAAS,CAAE,IACb,CAAC,CACDC,iBAAiB,CAAE,CACjBC,cAAc,CAAE,CAAChC,KAAK,CAAEK,SAAS,CAAEJ,KAAK,CAAEC,OAAO,CAAEC,KAAK,CAAEC,QAAQ,CAAC,CACnE0B,SAAS,CAAE,IACb,CACF,CAAC,CAAC,EACJ,CAAC,CAAC,CAEF,MAAO,IAAMG,gBAAe,CAAG1B,YAAY,CAACkB,WAAW,CAAC,CACxD,cAAeA,YAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}